🚀 ORCHID CONTINUUM: COMPLETE MANUAL MIGRATION GUIDE
================================================================

⚠️  IMPORTANT: Run these commands EXACTLY as written, one at a time.
    Copy and paste each command into your Replit terminal.

================================================================
STEP 1: CREATE DATABASE BACKUP (In Replit Terminal)
================================================================

# Use the correct pg_dump version and create backup:
/nix/store/*/bin/pg_dump $DATABASE_URL > orchid_continuum_backup.sql

# Check backup was created successfully:
ls -lh orchid_continuum_backup.sql
wc -l orchid_continuum_backup.sql

================================================================
STEP 2: PREPARE GIT REPOSITORY (In Replit Terminal)  
================================================================

# Remove any git locks:
rm -f .git/index.lock .git/config.lock 2>/dev/null || true

# Initialize git and add all files:
git init
git add .

# Create the migration commit:
git commit -m "🚀 Complete Orchid Continuum Migration from Replit

✅ Master AI Widget Manager - Autonomous monitoring system
✅ AI Breeder Assistant Pro - Enhanced breeding analysis  
✅ AI Health Diagnostic - Advanced orchid health analysis
✅ Adaptive Care Calendar - Intelligent care scheduling
✅ AI Collection Manager & Chat - Complete collection tools
✅ Database backup with 5,888+ orchid records included
✅ Production deployment ready (Docker, CI/CD, migrations)

Ready for Render deployment and Neon One widget embedding."

================================================================
STEP 3: PUSH TO YOUR GITHUB REPOSITORY (In Replit Terminal)
================================================================

# REPLACE "YOUR_USERNAME" and "YOUR_REPO" with your actual GitHub details:

git remote add origin https://github.com/YOUR_USERNAME/YOUR_REPO.git
git branch -M main  
git push -u origin main

# If you get authentication errors, you may need to use a Personal Access Token

================================================================
STEP 4: DOWNLOAD DATABASE BACKUP FILE 
================================================================

# In Replit: Right-click on "orchid_continuum_backup.sql" → Download
# Save it to your computer - you'll need it for the next step

================================================================
STEP 5: SET UP RENDER DATABASE
================================================================

1. Go to: https://dashboard.render.com
2. Click "New +" → "PostgreSQL"
3. Settings:
   - Name: orchid-continuum-db
   - Database: orchid_continuum  
   - User: orchid_user
   - Region: Choose closest to you
4. Click "Create Database"
5. COPY the "External Database URL" - you'll need this!

================================================================
STEP 6: IMPORT DATABASE TO RENDER (On Your Computer)
================================================================

# Install PostgreSQL client if you don't have it:
# Mac: brew install postgresql
# Ubuntu/WSL: sudo apt install postgresql-client
# Windows: Download from postgresql.org

# Import your backup (replace with your actual Render database URL):
psql "postgresql://user:password@host:port/database" < orchid_continuum_backup.sql

# Verify the import worked:
psql "postgresql://user:password@host:port/database" -c "SELECT COUNT(*) FROM orchid_records;"

# Should show: count = 5888 (or your current record count)

================================================================
STEP 7: CREATE RENDER WEB SERVICE
================================================================

1. In Render dashboard: Click "New +" → "Web Service"
2. Connect GitHub repository: YOUR_USERNAME/YOUR_REPO
3. Settings:
   - Name: orchid-continuum
   - Branch: main
   - Runtime: Docker (if Dockerfile detected) OR Python 3.11
   
4. BUILD COMMAND:
   pip install -r requirements.txt

5. START COMMAND:  
   gunicorn --bind 0.0.0.0:$PORT --workers 2 --timeout 120 main:app

6. ENVIRONMENT VARIABLES (click "Add Environment Variable"):
   
   DATABASE_URL = (paste your Render database URL from Step 5)
   SESSION_SECRET = (generate a random 64-character string)
   OPENAI_API_KEY = (your OpenAI API key)
   FLASK_ENV = production
   PORT = 10000

7. Click "Create Web Service"

================================================================
STEP 8: VERIFY DEPLOYMENT WORKS
================================================================

After deployment completes, test these URLs:

✅ Main app: https://your-app-name.onrender.com/
✅ AI Widget Manager: https://your-app-name.onrender.com/ai-widget-manager/dashboard
✅ Master Dashboard: https://your-app-name.onrender.com/master-grower-dashboard  
✅ Health check: https://your-app-name.onrender.com/health

================================================================
STEP 9: NEON ONE PREPARATION (Optional - for later)
================================================================

When ready to embed widgets in Neon One website:

1. Create iframe-friendly widget endpoints
2. Update CSP headers for Neon One domains
3. Test embedding with sample iframe code

================================================================
🎉 MIGRATION COMPLETE!
================================================================

Your Orchid Continuum platform is now running on Render with:
- 5,888+ orchid records migrated
- All AI widgets fully functional  
- Master AI Widget Manager monitoring everything
- Production-ready deployment
- Ready for Neon One integration

Need help? Check the logs in Render dashboard or run health checks.